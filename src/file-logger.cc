/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <file-logger.hh>
#include <chrono>
#include <iomanip>
#include <boost/filesystem.hpp>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_generators.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <log.hh>

File_logger::File_logger(const IConfig *config)
{
  Log::debug("creating file logger");
  if (!config) {
    Log::fatal("File_logger::File_logger(): config is NULL");
  }
  _config = config;
  _log_file = 0;
  _event_filter = 0;
}

File_logger::~File_logger()
{
  Log::debug("deleting file logger");
  // locally managed non-Qt objects
  if (_log_file) {
    _log_file->flush();
    _log_file->close();
    delete _log_file;
    _log_file = 0;
  }

  // elsewhere managed objects
  _config = 0;
  _event_filter = 0;
}

std::string
File_logger::create_date()
{
  std::chrono::time_point<std::chrono::system_clock> now =
    std::chrono::system_clock::now();
  std::time_t now_time = std::chrono::system_clock::to_time_t(now);
  std::stringstream str_time;
  str_time << std::put_time(std::gmtime(&now_time), "%F_%T");
  return str_time.str();
}

std::string
File_logger::create_uid()
{
  boost::uuids::random_generator gen;
  boost::uuids::uuid uuid = gen();
  return boost::uuids::to_string(uuid);
}

std::string
File_logger::instantiate_filename_pattern(const std::string *filename_pattern)
{
  std::string instance;
  std::string variable;
  bool parse_variable = false;
  for (const char& ch : *filename_pattern) {
    if (parse_variable) {
      if (ch == '$') {
        parse_variable = false;
        if (variable.empty()) {
          instance.append(1, ch);
        } else if (!variable.compare("DATE")) {
          instance.append(create_date());
        } else if (!variable.compare("UID")) {
          instance.append(create_uid());
        } else {
          Log::fatal("File_logger::instantiate_filename_pattern(): "
                     "error in filename pattern: unknown variable");
        }
      } else {
        variable.append(1, ch);
      }
    } else {
      if (ch == '$') {
        variable.clear();
        parse_variable = true;
      } else {
        instance.append(1, ch);
      }
    }
  }
  if (parse_variable) {
    Log::fatal("File_logger::instantiate_filename_pattern(): "
               "error in filename pattern: unterminated variable");
  }
  return instance;
}

void
File_logger::start()
{
  if (_log_file) {
    Log::warn("File_logger::start(): logging already started");
    return;
  }
  Log::debug("File_logger::start(): start logging");
  std::string filename_pattern = _config->get_log_filename_pattern();
  std::string log_dir_path = _config->get_log_dir_path();
  std::string log_file_name = instantiate_filename_pattern(&filename_pattern);
  auto log_file_path =
    boost::filesystem::path(log_dir_path) /
    boost::filesystem::path(log_file_name);
  _log_file = new std::ofstream(log_file_path.string());
  if (!_log_file) {
    Log::fatal("File_logger::start(): not enough memory");
  }
  if (_log_file->fail()) {
    std::stringstream full_msg;
    full_msg << "File_logger::start(): "
             << "failed creating log file: "
             << log_file_path;
    Log::fatal(full_msg.str());
  }
}

void
File_logger::stop()
{
  if (!_log_file) {
    Log::warn("File_logger::stop(): logging already stopped");
    return;
  }
  Log::debug("File_logger::stop(): stop logging");
  _log_file->close();
  delete _log_file;
  _log_file = 0;
}

void
File_logger::notify_event(const Serial_event *event)
{
  if (!_log_file) {
    return;
  }
  if (_event_filter && !_event_filter->accept(event)) {
    return;
  }
  (*_log_file) << event->to_string() << "\n";
}

std::ostream &
operator <<(std::ostream &os, const File_logger &file_logger)
{
  os << "File_logger()";
  return os;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
