/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <log-panel-list-updater.hh>
#include <log.hh>
#include <serial-event-pass-all-filter.hh>

Log_panel_list_updater::Log_panel_list_updater(QObject *parent,
                                               Log_panel_list *log_panel_list)
  : QTimer(parent)
{
  if (!log_panel_list) {
    Log::fatal("Log_panel_list_updater::Log_panel_list_updater(): "
               "log_panel_list is NULL");
  }
  _log_panel_list = log_panel_list;

  _events = new std::vector<Serial_event>();
  if (!_events) {
    Log::fatal("Log_panel_list_updater::Log_panel_list_updater(): "
               "not enough memory");
  }

  _event_filter = &Serial_event_pass_all_filter::DEFAULT_INSTANCE;
  pthread_mutex_init(&_access_events, 0);
  QObject::connect(this, SIGNAL(timeout()),
                   this, SLOT(update()));
  start(100);
}

Log_panel_list_updater::~Log_panel_list_updater()
{
  // locally managed non-Qt objects
  delete _events;
  _events = 0;
  pthread_mutex_destroy(&_access_events);

  // elsewhere managed objects
  _log_panel_list = 0;
  _event_filter = 0;
}

void
Log_panel_list_updater::log_clear()
{
  Log::debug("clearing log panel list");
  _log_panel_list->setEnabled(false);
}

void
Log_panel_list_updater::notify_event(const Serial_event *event)
{
  Log::trace("QQQQQQ4 notify list updater");
  if (!_event_filter->accept(event))
    return;
  Log::trace("QQQQQQ5 notify list updater");
  pthread_mutex_lock(&_access_events);
  Log::trace("QQQQQQ6 notify list updater");
  _events->push_back(*event);
  Log::trace("QQQQQQ7 notify list updater");
  pthread_mutex_unlock(&_access_events);
  Log::trace("QQQQQQ8 notify list updater");
}

inline int
Log_panel_list_updater::MAX(const int a, const int b)
{
  return a > b ? a :b;
}

void
Log_panel_list_updater::update()
{
  std::vector<Serial_event> copy_of_events;

  pthread_mutex_lock(&_access_events);

  const int size = _events->size();
  if (size > 0) {
    const int start_index = MAX(0, size - _log_panel_list->BUFFERED_LINES);
    for (int index = start_index; index < size; index++) {
      copy_of_events.push_back((*_events)[index]);
    }
    _events->clear();
  }

  pthread_mutex_unlock(&_access_events);

  if (size > 0) {
    _log_panel_list->update_events(&copy_of_events);
  }
}

std::ostream &operator <<(std::ostream &os,
                          const Log_panel_list_updater &log_panel_list_updater)
{
  os << "Log_panel_list_updater()";
  return os;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
