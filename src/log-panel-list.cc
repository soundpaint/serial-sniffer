/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <log-panel-list.hh>
#include <log-panel-list-updater.hh>
#include <log.hh>
#include <time-utils.hh>

const int
Log_panel_list::BUFFERED_LINES = 32;

Log_panel_list::Log_panel_list(App_control *app_control,
                               QWidget *parent)
  : QListWidget(parent)
{
  if (!app_control) {
    Log::fatal("Log_panel_list::Log_panel_list(): app_control is NULL");
  }
  _app_control = app_control;

  //addItem(tr("Serial Sniffer Log Panel"));
  _accept_events = false;

  _log_panel_list_updater = new Log_panel_list_updater(this, this);
  if (!_log_panel_list_updater) {
    Log::fatal("Log_panel_list::Log_panel_list(): not enough memory");
  }

  create_actions();
}

Log_panel_list::~Log_panel_list()
{
  // locally managed Qt objects
  delete _log_panel_list_updater;
  _log_panel_list_updater = 0;

  // elsewhere managed objects
  _app_control = 0;

  _accept_events = false;
}

void
Log_panel_list::create_actions()
{
}

void
Log_panel_list::start_log()
{
  std::stringstream entry;
  entry << Time_utils::now_as_gmt() << " | console log started";
  addItem(QString::fromStdString(entry.str()));
  _accept_events = true;
}

void
Log_panel_list::stop_log()
{
  _accept_events = false;
  std::stringstream entry;
  entry << Time_utils::now_as_gmt() << " | console log stopped";
  addItem(QString::fromStdString(entry.str()));
}

void
Log_panel_list::clear_log()
{
  clear();
  std::stringstream entry;
  entry << Time_utils::now_as_gmt() << " | console log cleared";
  addItem(QString::fromStdString(entry.str()));
}

void
Log_panel_list::notify_event(const Serial_event *event)
{
  Log::trace("QQQQQQ3 notify list updater");
  _log_panel_list_updater->notify_event(event);
}

void
Log_panel_list::update_events(const std::vector<Serial_event> *_events)
{
  if (!_accept_events) {
    return;
  }

  const int size = _events->size();
  const int size_after_add = size + count();
  const int to_remove = size_after_add - BUFFERED_LINES;
  for (int count = 0; count < to_remove; count++) {
    takeItem(0);
  }
  for (int count = 0; count < size; count++) {
    const Serial_event *event = &((*_events)[count]);
    addItem(QString::fromStdString(event->to_string()));
  }
  setCurrentRow(count() - 1);
}

std::ostream &operator <<(std::ostream &os,
                          const Log_panel_list &log_panel_list)
{
  os << "Log_panel_list()";
  return os;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
