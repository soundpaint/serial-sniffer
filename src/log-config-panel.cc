/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <log-config-panel.hh>
#include <log.hh>

Log_config_panel::Log_config_panel(App_control *app_control,
                                   QWidget *parent)
  : QGroupBox(tr("File Logging"), parent)
{
  if (!app_control) {
    Log::fatal("Log_config_panel::Log_config_panel(): "
               "app_control is NULL");
  }
  _app_control = app_control;

  _layout = new QFormLayout();
  if (!_layout) {
    Log::fatal("Log_config_panel::Log_config_panel(): not enough memory");
  }
  setLayout(_layout);

  // enable file logging on start
  _edit_enable_file_logging_on_start = new QCheckBox();
  if (!_edit_enable_file_logging_on_start) {
    Log::fatal("Log_config_panel::Log_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Enable File &Logging on Start:"),
                  _edit_enable_file_logging_on_start);

  // dir path
  _edit_dir_path = new QLineEdit();
  if (!_edit_dir_path) {
    Log::fatal("Log_config_panel::Log_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Logging &Directory Path:"), _edit_dir_path);

  // filename pattern
  _edit_filename_pattern = new QLineEdit();
  if (!_edit_filename_pattern) {
    Log::fatal("Log_config_panel::Log_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Logging &Filename Pattern:"), _edit_filename_pattern);

  // append on start
  _edit_append_on_start = new QCheckBox();
  if (!_edit_append_on_start) {
    Log::fatal("Log_config_panel::Log_config_panel(): not enough memory");
  }
  _layout->addRow(tr("&Append on Start:"), _edit_append_on_start);

  create_actions();
}

Log_config_panel::~Log_config_panel()
{
  // locally managed Qt objects
  _layout->deleteLater();
  _layout = 0;
  _edit_enable_file_logging_on_start->deleteLater();
  _edit_enable_file_logging_on_start = 0;
  _edit_dir_path->deleteLater();
  _edit_dir_path = 0;
  _edit_filename_pattern->deleteLater();
  _edit_filename_pattern = 0;
  _edit_append_on_start->deleteLater();
  _edit_append_on_start = 0;

  // elsewhere managed objects
  _app_control = 0;
}

void
Log_config_panel::save_values()
{
  Config *config = _app_control->get_config();
  const bool enable_file_logging_on_start =
    _edit_enable_file_logging_on_start->isChecked();
  config->set_log_enable_file_logging_on_start(enable_file_logging_on_start);
  config->set_log_dir_path(_edit_dir_path->text().toStdString());
  config->set_log_filename_pattern(_edit_filename_pattern->text().toStdString());
  config->set_log_append_on_start(_edit_append_on_start->isChecked());
  _dirty = false;
}

void
Log_config_panel::load_values()
{
  const IConfig *config = _app_control->get_config();
  const bool enable_file_logging_on_start =
    config->get_log_enable_file_logging_on_start();
  _edit_enable_file_logging_on_start->setChecked(enable_file_logging_on_start);
  const std::string dir_path = config->get_log_dir_path();
  _edit_dir_path->setText(QString::fromStdString(dir_path));
  const std::string filename_pattern = config->get_log_filename_pattern();
  _edit_filename_pattern->setText(QString::fromStdString(filename_pattern));
  const bool append_on_start = config->get_log_append_on_start();
  _edit_append_on_start->setChecked(append_on_start);
  _dirty = false;
}

const bool
Log_config_panel::get_dirty() const
{
  return _dirty;
}

void
Log_config_panel::create_actions()
{
  connect(_edit_enable_file_logging_on_start, &QCheckBox::stateChanged,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_dir_path, &QLineEdit::textEdited,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_filename_pattern, &QLineEdit::textEdited,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_append_on_start, &QCheckBox::stateChanged,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
