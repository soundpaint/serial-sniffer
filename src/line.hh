/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef LINE_HH
#define LINE_HH

#include <vector>
#include <csignal>
#include <thread>
#include <mutex>
#include <functional>
#include <condition_variable>
#include <iline-status-listener.hh>
#include <iserial-event-listener.hh>

class Line : public ILine_info
{
public:
  enum line_type_t {
    rx, tx
  };
  Line(const line_type_t line_type,
       const std::string name,
       const std::string group_name,
       const int filestream,
       const uint32_t buffer_size);
  virtual ~Line();
  const uint32_t get_id() const;
  const line_type_t get_line_type() const;
  const std::string get_name() const;
  const std::string get_full_name() const;
  void add_status_listener(ILine_status_listener *listener);
  void remove_status_listener(ILine_status_listener *listener);
  void add_event_listener(ISerial_event_listener *listener);
  void remove_event_listener(ISerial_event_listener *listener);
  void notify_event_listeners(const Serial_event *event);
  void start(const bool ignore_status = false);
  void stop(const bool ignore_status = false);
  void quit();
  virtual const bool is_running() const;
  virtual const std::string to_string() const;
protected:
  int _filestream;
  uint32_t _buffer_size;
  unsigned char *_buffer;
  std::unique_lock<std::mutex> acquire_interrupt_lock();
  std::condition_variable *get_interrupt_condition();
  void serialize_with_start_stop(const std::function<void ()> critical_section);
  void atomic_access_buffer(const std::function<void ()> critical_section);
  virtual void transfer() = 0;
private:
  static const std::string STR_RX;
  static const std::string STR_TX;
  uint32_t _id;
  line_type_t _line_type;
  std::string _name;
  std::string _group_name;
  std::string _full_name;
  std::vector<ILine_status_listener *> *_status_listeners;
  std::vector<ISerial_event_listener *> *_event_listeners;
  std::thread *_transfer_thread;
  std::mutex _atomic_handle_interrupt;
  std::mutex _atomic_access_buffer;
  std::mutex _serialize_start_stop;
  std::condition_variable _interrupt_condition;
  struct sigaction _transfer_interrupt;
  struct sigaction _old_transfer_interrupt;
  bool _quit_requested;
  bool _pause_requested;
  bool _resume_requested;
  bool _is_running;
  static uint32_t _next_id;
  static uint32_t create_id();
  inline void started();
  inline void stopped();
  static void transfer_loop_static(Line *line);
  void transfer_loop_phase_run();
  void transfer_loop_phase_sleep();
  void transfer_loop();
  static void handle_transfer_interrupt(const int signum);
  const std::string line_type_as_string() const;
};

#endif /* LINE_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
