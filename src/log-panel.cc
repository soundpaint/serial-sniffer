/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <log-panel.hh>
#include <log.hh>
//#include <QtWidgets/QGroupBox>

Log_panel::Log_panel(App_control *app_control,
                     QWidget *parent)
  : QWidget(parent)
{
  if (!app_control) {
    Log::fatal("Log_panel::Log_panel(): app_control is NULL");
  }
  _app_control = app_control;

  _status_listeners = new std::vector<ILogger_status_listener *>();
  if (!_status_listeners) {
    Log::fatal("Log_panel::Log_panel(): not enough memory");
  }
  add_status_listener(this);

  _layout = new QVBoxLayout();
  if (!_layout) {
    Log::fatal("License_dialog::License_dialog(): not enough memory");
  }
  setLayout(_layout);

  _log_panel_list = new Log_panel_list(app_control, this);
  if (!_log_panel_list) {
    Log::fatal("Log_panel::Log_panel(): not enough memory");
  }

  _layout->addWidget(_log_panel_list);

  _buttons_panel = new QWidget(this);
  if (!_buttons_panel) {
    Log::fatal("Log_panel::Log_panel(): not enough memory");
  }
  _layout->addWidget(_buttons_panel);

  _buttons_layout = new QHBoxLayout(_buttons_panel);
  if (!_buttons_layout) {
    Log::fatal("Log_panel::Log_panel(): not enough memory");
  }
  _buttons_panel->setLayout(_buttons_layout);

  // clear button
  _button_clear = new QPushButton(tr("&Clear"), this);
  if (!_button_clear) {
    Log::fatal("Log_panel::Log_panel(): not enough memory");
  }
  _buttons_layout->addWidget(_button_clear);

  _buttons_layout->addStretch();

  // start button
  _button_start = new QPushButton(tr("&Start"), this);
  if (!_button_start) {
    Log::fatal("Log_panel::Log_panel(): not enough memory");
  }
  _button_start->setEnabled(true);
  _buttons_layout->addWidget(_button_start);

  // stop button
  _button_stop = new QPushButton(tr("Sto&p"), this);
  if (!_button_stop) {
    Log::fatal("Log_panel::Log_panel(): not enough memory");
  }
  _button_stop->setEnabled(false);
  _button_stop->setAutoDefault(true);
  _button_stop->setDefault(true);
  _buttons_layout->addWidget(_button_stop);

  const IConfig *config = _app_control->get_config();
  if (!config->get_serial_auto_start()) {
    stream_stopped();
  }

  create_actions();
}

Log_panel::~Log_panel()
{
  remove_status_listener(this);

  // locally managed Qt objects
  delete _status_listeners;
  _status_listeners = 0;
  _log_panel_list->deleteLater();
  _log_panel_list = 0;
  _layout->deleteLater();
  _layout = 0;

  // elsewhere managed objects
  _app_control = 0;
}

void
Log_panel::create_actions()
{
  connect(_button_clear, &QPushButton::released,
          _app_control, [=](){ _app_control->clear_console_log(); });
  connect(_button_start, &QPushButton::released,
          _app_control, [=](){ _app_control->start_console_log(); });
  connect(_button_stop, &QPushButton::released,
          _app_control, [=](){ _app_control->stop_console_log(); });
}

void
Log_panel::add_status_listener(ILogger_status_listener *listener)
{
  if (!listener) {
    Log::fatal("Log_panel::add_status_listener(): "
               "listener is NULL");
  }
  if (!_status_listeners) {
    Log::fatal("Log_panel::add_status_listener(): "
               "_status_listeners is NULL");
  }
  _status_listeners->push_back(listener);
}

void
Log_panel::remove_status_listener(ILogger_status_listener *listener)
{
  if (!listener) {
    Log::fatal("Log_panel::remove_status_listener(): "
               "listener is NULL");
  }
  if (!_status_listeners) {
    Log::fatal("Log_panel::remove_status_listener(): "
               "_status_listeners is NULL");
  }
  auto tail_start =
    std::remove(_status_listeners->begin(),
                _status_listeners->end(),
                listener);
  _status_listeners->erase(tail_start, _status_listeners->end());
}

void
Log_panel::start()
{
  _log_panel_list->start_log();
  const int size = _status_listeners->size();
  for (int index = 0; index < size; index++) {
    ILogger_status_listener *listener = (*_status_listeners)[index];
    listener->logger_started();
  }
}

void
Log_panel::stop()
{
  _log_panel_list->stop_log();
  const int size = _status_listeners->size();
  for (int index = 0; index < size; index++) {
    ILogger_status_listener *listener = (*_status_listeners)[index];
    listener->logger_stopped();
  }
}

void
Log_panel::clear()
{
  _log_panel_list->clear_log();
}

void
Log_panel::logger_started()
{
  _button_start->setEnabled(false);
  _button_stop->setEnabled(true);
}

void
Log_panel::logger_stopped()
{
  _button_start->setEnabled(true);
  _button_stop->setEnabled(false);
}

void
Log_panel::stream_started()
{
  Log::debug("enabling log panel list");
  _log_panel_list->setEnabled(true);
}

void
Log_panel::stream_stopped()
{
  Log::debug("disabling log panel list");
  _log_panel_list->setEnabled(false);
}

void
Log_panel::notify_event(const Serial_event *event)
{
  Log::trace("QQQQQQ2 notify list");
  _log_panel_list->notify_event(event);
}

void
Log_panel::update_events(const std::vector<Serial_event> *_events)
{
  _log_panel_list->update_events(_events);
}

std::ostream &operator <<(std::ostream &os, const Log_panel &log_panel)
{
  os << "Log_panel()";
  return os;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
