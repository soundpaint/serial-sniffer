/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef STREAMER_THREAD_HH
#define STREAMER_THREAD_HH

#include <vector>
#include <map>
#include <app-control.hh>
#include <iserial-event-listener.hh>
#include <uart.hh>

class Streamer_thread
{
public:
  Streamer_thread(App_control *app_control);
  virtual ~Streamer_thread();
  void add_event_listener(ISerial_event_listener *listener);
  void remove_event_listener(ISerial_event_listener *listener);
  const std::vector<const IUart_info *> get_all_uarts() const;
  const IUart_info *get_uart_info(const uint32_t id) const;
  void start_line(const uint32_t id);
  void stop_line(const uint32_t id);
private:
  App_control *_app_control;
  std::map<const uint32_t, Uart *> *_uarts;
  std::map<const uint32_t, Line *> *_lines;
  std::vector<ISerial_event_listener *> *_event_listeners;
  Uart *_com1;
  Uart *_com2;
  void add_uart(Uart *uart);
  void remove_uart(Uart *uart);
  Uart *lookup_uart_by_id(const uint32_t id) const;
  Line *lookup_line_by_id(const uint32_t id) const;
};

#endif /* STREAMER_THREAD_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
