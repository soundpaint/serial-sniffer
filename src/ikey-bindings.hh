/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef IKEY_BINDINGS_HH
#define IKEY_BINDINGS_HH

#include <map>
#include <iostream>
#include <cstring>

class IKey_bindings
{
public:
  enum Action
    {
      None,
      Menu,
      Quit,
      About,
      License,
      Audio_decrement_volume,
      Audio_increment_volume,
      Audio_mute_unmute
    };
  static Action action_from_string(const char *str);
  static const char *action_to_string(const Action action);
  virtual ~IKey_bindings() = 0;
  virtual const Action get_action_for_key(const int key) const = 0;
  virtual std::map<int, Action>::iterator iterator_begin() const = 0;
  virtual const std::map<int, Action>::iterator iterator_end() const = 0;
};

inline IKey_bindings::~IKey_bindings() {}

inline IKey_bindings::Action
IKey_bindings::action_from_string(const char *str) {
  int intAction = Menu;
  do {
    const Action action = static_cast<Action>(intAction);
    if (!strcmp(str, action_to_string(action)))
      return action;
    intAction++;
  } while (intAction <= Audio_mute_unmute);
  return None;
}

inline const char *
IKey_bindings::action_to_string(const Action action) {
  switch (action) {
  case None:
    return "None";
  case Menu:
    return "Menu";
  case Quit:
    return "Quit";
  case About:
    return "About";
  case License:
    return "License";
  case Audio_decrement_volume:
    return "Audio_decrement_volume";
  case Audio_increment_volume:
    return "Audio_increment_volume";
  case Audio_mute_unmute:
    return "Audio_mute_unmute";
  default:
    throw new std::exception();
  }
}

inline std::ostream &operator<<(std::ostream &str,
                                const IKey_bindings &key_bindings)
{
  return str << "IKey_bindings()"; // TODO
}

#endif /* IKEY_BINDINGS_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
