/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <serial-event.hh>
#include <log.hh>
#include <boost/format.hpp>
#include <time-utils.hh>

const std::string
Serial_event::STR_NONE = std::string("none");

const std::string
Serial_event::STR_RX_DATA_BYTE = std::string("rx data byte");

const std::string
Serial_event::STR_TX_DATA_BYTE = std::string("tx data byte");

const std::string
Serial_event::STR_STREAM_STARTED = std::string("stream started");

const std::string
Serial_event::STR_STREAM_STOPPED = std::string("stream stopped");

const std::string
Serial_event::STR_BUFFER_UNDERFLOW = std::string("buffer underflow");

const std::string
Serial_event::STR_BUFFER_OVERFLOW = std::string("buffer overflow");

const Serial_event
Serial_event::create_none(const ILine_info *line_info)
{
  return Serial_event(line_info, event_type_t::stream_started);
}

const Serial_event
Serial_event::create_stream_started(const ILine_info *line_info)
{
  return Serial_event(line_info, event_type_t::stream_started);
}

const Serial_event
Serial_event::create_stream_stopped(const ILine_info *line_info)
{
  return Serial_event(line_info,event_type_t::stream_stopped);
}

const Serial_event
Serial_event::create_buffer_underflow(const ILine_info *line_info)
{
  return Serial_event(line_info, event_type_t::buffer_underflow);
}

const Serial_event
Serial_event::create_buffer_overflow(const ILine_info *line_info)
{
  return Serial_event(line_info, event_type_t::buffer_overflow);
}

const Serial_event
Serial_event::create_receive_data(const ILine_info *line_info,
                                  const unsigned char data_byte)
{
  return Serial_event(line_info, event_type_t::rx_data_byte, data_byte);
}

const Serial_event
Serial_event::create_transmit_data(const ILine_info *line_info,
                                   const unsigned char data_byte)
{
  return Serial_event(line_info, event_type_t::tx_data_byte, data_byte);
}

Serial_event::Serial_event(const ILine_info *line_info,
                           const event_type_t event_type,
                           const unsigned char data_byte)
{
  if (!line_info) {
    Log::fatal("Serial_event::Serial_event(): "
               "line_info is NULL");
  }
  _line_info = line_info;
  _time_point = Time_utils::time_point_now();
  _event_type = event_type;
  _data_byte = data_byte;
}

Serial_event::~Serial_event()
{
  _line_info = 0;
  _time_point = Time_utils::MIN_TIME_POINT;
  _event_type = none;
  _data_byte = 0;
}

const ILine_info *
Serial_event::get_line_info() const
{
  return _line_info;
}

const Serial_event::event_type_t
Serial_event::get_event_type() const
{
  return _event_type;
}

const std::string
Serial_event::get_event_type_as_string() const
{
  switch (_event_type) {
  case none:
    return STR_NONE;
  case rx_data_byte:
    return STR_RX_DATA_BYTE;
  case tx_data_byte:
    return STR_TX_DATA_BYTE;
  case stream_started:
    return STR_STREAM_STARTED;
  case stream_stopped:
    return STR_STREAM_STOPPED;
  case buffer_underflow:
    return STR_BUFFER_UNDERFLOW;
  case buffer_overflow:
    return STR_BUFFER_OVERFLOW;
  default:
    Log::fatal("unexpected case fall-through");
    return {};
  }
}

const unsigned char
Serial_event::get_data_byte() const
{
  return _data_byte;
}

const std::string
Serial_event::get_data_byte_as_hex() const
{
  return boost::str(boost::format("0x%02x") % ((int)_data_byte));
}

const char
Serial_event::get_data_byte_as_char() const
{
  if ((_data_byte >= ' ') && (_data_byte <= '~')) {
    return _data_byte;
  }
  return '?';
}

const std::chrono::time_point<std::chrono::system_clock>
Serial_event::get_time_point() const
{
  return _time_point;
}

const std::string
Serial_event::get_time_point_as_string() const
{
  return Time_utils::time_point_as_gmt(_time_point);
}

const std::string
Serial_event::to_string() const
{
  std::stringstream str;
  str
    << get_time_point_as_string()
    << " | "
    << _line_info->to_string()
    << " | "
    << get_event_type_as_string();
  if ((_event_type == rx_data_byte) || (_event_type == tx_data_byte)) {
    str
      << "("
      << get_data_byte_as_hex()
      << ") | "
      << get_data_byte_as_char();
  }
  return str.str();
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
