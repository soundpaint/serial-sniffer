/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef CONFIG_HH
#define CONFIG_HH

#include <iconfig.hh>

#define CONFIG_NAMESPACE_URI "http://soundpaint.org/schema/serial-sniffer/config.xsd"
#define CONFIG_DTD_ID "config"
#define CONFIG_PUBLIC_ID ""
#define CONFIG_SYSTEM_ID ""

class Config : public IConfig
{
public:
  static const locale_t LOCALE_CONFIG_C;
  static const std::locale LOCALE_CONFIG_CPP;
  static const std::string SERIAL_DATA_BITS_SEVEN_TO_STR;
  static const std::string SERIAL_DATA_BITS_EIGHT_TO_STR;
  static const std::string SERIAL_PARITY_BIT_NONE_TO_STR;
  static const std::string SERIAL_PARITY_BIT_EVEN_TO_STR;
  static const std::string SERIAL_PARITY_BIT_ODD_TO_STR;
  static const std::string SERIAL_STOP_BITS_ONE_TO_STR;
  static const std::string SERIAL_STOP_BITS_TWO_TO_STR;

  static const std::string DEFAULT_SERIAL_IN_DEV_PATH;
  static const std::string DEFAULT_SERIAL_OUT_DEV_PATH;
  static const uint32_t DEFAULT_SERIAL_BUFFER_SIZE;
  static const uint32_t DEFAULT_SERIAL_BAUD_RATE;
  static const data_bits_t DEFAULT_SERIAL_DATA_BITS;
  static const parity_bit_t DEFAULT_SERIAL_PARITY_BIT;
  static const stop_bits_t DEFAULT_SERIAL_STOP_BITS;
  static const bool DEFAULT_SERIAL_AUTO_START;
  static const bool DEFAULT_LOG_ENABLE_FILE_LOGGING_ON_START;
  static const std::string DEFAULT_LOG_DIR_PATH;
  static const std::string DEFAULT_LOG_FILENAME_PATTERN;
  static const bool DEFAULT_LOG_APPEND_ON_START;
  static const bool DEFAULT_FULL_SCREEN;
  static const uint16_t DEFAULT_WINDOW_WIDTH;
  static const uint16_t DEFAULT_WINDOW_HEIGHT;
  static const uint16_t DEFAULT_CONTROL_SHOW_AFTER_PRESSING;
  static const uint16_t DEFAULT_CONTROL_AUTOHIDE_AFTER;
  static const bool DEFAULT_ENABLE_CURSOR;
  static const bool DEFAULT_ENABLE_BUTTON_QUIT;
  static const bool DEFAULT_ENABLE_AUDIO;
  static const bool DEFAULT_ENABLE_VOLUME_CONTROL;
  static const double DEFAULT_AUDIO_SAMPLE_SCALE;
  static const int DEFAULT_AUDIO_SAMPLE_RATE;
  static const int DEFAULT_AUDIO_CHANNELS;
  static const bool DEFAULT_ALSA_VERBOSE;
  static const std::string DEFAULT_ALSA_PLAYBACK_DEVICE;
  static const int DEFAULT_ALSA_BUFFER_TIME;
  static const int DEFAULT_ALSA_PERIOD_TIME;
  static const double DEFAULT_AUDIO_INITIAL_VOLUME;
  Config(const char *path);
  virtual ~Config();
  static const std::string data_bits_to_string(const data_bits_t data_bits);
  static const std::string parity_bit_to_string(const parity_bit_t parity_bit);
  static const std::string stop_bits_to_string(const stop_bits_t stop_bits);
  void set_serial_in_dev_path(const std::string dev_path);
  const std::string get_serial_in_dev_path() const;
  void set_serial_out_dev_path(const std::string dev_path);
  const std::string get_serial_out_dev_path() const;
  void set_serial_buffer_size(const uint32_t buffer_size);
  const uint32_t get_serial_buffer_size() const;
  void set_serial_baud_rate(const uint32_t baud_rate);
  const uint32_t get_serial_baud_rate() const;
  void set_serial_data_bits(const data_bits_t data_bits);
  const data_bits_t get_serial_data_bits() const;
  void set_serial_parity_bit(const parity_bit_t parity_bit);
  const parity_bit_t get_serial_parity_bit() const;
  void set_serial_stop_bits(const stop_bits_t stop_bits);
  const stop_bits_t get_serial_stop_bits() const;
  void set_serial_auto_start(const bool auto_start);
  const bool get_serial_auto_start() const;

  void set_log_enable_file_logging_on_start(const bool);
  const bool get_log_enable_file_logging_on_start() const;
  void set_log_dir_path(const std::string);
  const std::string get_log_dir_path() const;
  void set_log_filename_pattern(const std::string);
  const std::string get_log_filename_pattern() const;
  void set_log_append_on_start(const bool);
  const bool get_log_append_on_start() const;

  void set_full_screen(const bool full_screen);
  const bool get_full_screen() const;
  void set_window_width(const uint16_t window_width);
  const uint16_t get_window_width() const;
  void set_window_height(const uint16_t window_height);
  const uint16_t get_window_height() const;
  void set_control_show_after_pressing(const uint16_t control_show_after_pressing);
  const uint16_t get_control_show_after_pressing() const;
  void set_control_autohide_after(const uint16_t control_autohide_after);
  const uint16_t get_control_autohide_after() const;
  void set_enable_cursor(const bool enable_cursor);
  const bool get_enable_cursor() const;
  void set_enable_button_quit(const bool enable_button_quit);
  const bool get_enable_button_quit() const;
  void bind_key_to_action(const int key, const IKey_bindings::Action action);
  const IKey_bindings::Action get_action_for_key(const int key) const;
  const std::map<int, IKey_bindings::Action>::iterator
  get_action_key_iterator_begin() const;
  const std::map<int, IKey_bindings::Action>::iterator
  get_action_key_iterator_end() const;
  void set_enable_audio(const bool enable_audio);
  const bool get_enable_audio() const;
  void set_enable_volume_control(const bool enable_volume_control);
  const bool get_enable_volume_control() const;
  void set_audio_sample_scale(const double sample_scale);
  const double get_audio_sample_scale() const;
  void set_audio_sample_rate(const int sample_rate);
  const int get_audio_sample_rate() const;
  void set_audio_channels(const int channels);
  const int get_audio_channels() const;
  void set_alsa_verbose(const bool alsa_verbose);
  const bool get_alsa_verbose() const;
  void set_alsa_playback_device(const std::string alsa_playback_device);
  const std::string get_alsa_playback_device() const;
  void set_alsa_buffer_time(const int alsa_buffer_time);
  const int get_alsa_buffer_time() const;
  void set_alsa_period_time(const int alsa_period_time);
  const int get_alsa_period_time() const;
  void set_audio_initial_volume(const double audio_initial_volume);
  const double get_audio_initial_volume() const;
  void save(const std::string file_path) const;
  void to_string(std::stringstream *buffer) const;
private:
  std::string _serial_in_dev_path;
  std::string _serial_out_dev_path;
  uint32_t _serial_buffer_size;
  uint32_t _serial_baud_rate;
  data_bits_t _serial_data_bits;
  parity_bit_t _serial_parity_bit;
  stop_bits_t _serial_stop_bits;
  bool _serial_auto_start;
  bool _log_enable_file_logging_on_start;
  std::string _log_dir_path;
  std::string _log_filename_pattern;
  bool _log_append_on_start;
  bool _full_screen;
  uint16_t _window_width;
  uint16_t _window_height;
  uint16_t _control_show_after_pressing;
  uint16_t _control_autohide_after;
  bool _enable_cursor;
  bool _enable_button_quit;
  bool _enable_audio;
  bool _enable_volume_control;
  double _audio_sample_scale;
  int _audio_sample_rate;
  int _audio_channels;
  bool _alsa_verbose;
  std::string _alsa_playback_device;
  int _alsa_buffer_time;
  int _alsa_period_time;
  double _audio_initial_volume;
  Key_bindings *_key_bindings;
  static const locale_t create_locale_c();
};

#endif /* CONFIG_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
