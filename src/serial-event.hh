/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef SERIAL_EVENT_HH
#define SERIAL_EVENT_HH

#include <chrono>
#include <iline-info.hh>

class Serial_event
{
public:
  enum event_type_t {
    none = 0,
    rx_data_byte,
    tx_data_byte,
    stream_started,
    stream_stopped,
    buffer_underflow,
    buffer_overflow
  };
  static const std::string STR_NONE;
  static const std::string STR_RX_DATA_BYTE;
  static const std::string STR_TX_DATA_BYTE;
  static const std::string STR_STREAM_STARTED;
  static const std::string STR_STREAM_STOPPED;
  static const std::string STR_BUFFER_UNDERFLOW;
  static const std::string STR_BUFFER_OVERFLOW;

  static const Serial_event create_none(const ILine_info *line_info);
  static const Serial_event create_stream_started(const ILine_info *line_info);
  static const Serial_event create_stream_stopped(const ILine_info *line_info);
  static const Serial_event create_buffer_underflow(const ILine_info *line_info);
  static const Serial_event create_buffer_overflow(const ILine_info *line_info);
  static const Serial_event create_receive_data(const ILine_info *line_info,
                                                const unsigned char data_byte);
  static const Serial_event create_transmit_data(const ILine_info *line_info,
                                                 const unsigned char data_byte);
  virtual ~Serial_event();
  const ILine_info *get_line_info() const;
  const event_type_t get_event_type() const;
  const std::string get_event_type_as_string() const;
  const unsigned char get_data_byte() const;
  const std::string get_data_byte_as_hex() const;
  const char get_data_byte_as_char() const;
  const std::chrono::time_point<std::chrono::system_clock>
  get_time_point() const;
  const std::string get_time_point_as_string() const;
  const std::string to_string() const;
private:
  const ILine_info *_line_info;
  std::chrono::time_point<std::chrono::system_clock> _time_point;
  event_type_t _event_type;
  unsigned char _data_byte;
  Serial_event(const ILine_info *line_info,
               const event_type_t event_type,
               const unsigned char data_byte = 0);
};

#endif /* SERIAL_EVENT_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
