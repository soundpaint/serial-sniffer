/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <log.hh>
#include <QtWidgets/QMessageBox>
#include <serial-config-panel.hh>

Serial_config_panel::Serial_config_panel(App_control *app_control,
                                         QWidget *parent)
  : QGroupBox(tr("Serial Ports"), parent)
{
  if (!app_control) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): "
               "app_control is NULL");
  }
  _app_control = app_control;

  _layout = new QFormLayout();
  if (!_layout) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  setLayout(_layout);

  // serial input device
  _edit_serial_in_dev_path = new QLineEdit();
  if (!_edit_serial_in_dev_path) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Serial &Input Device (COM1):"),
                  _edit_serial_in_dev_path);

  // serial output device
  _edit_serial_out_dev_path = new QLineEdit();
  if (!_edit_serial_out_dev_path) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Serial &Output Device (COM2):"),
                  _edit_serial_out_dev_path);

  // serial buffer size
  _edit_serial_buffer_size = new QLineEdit();
  if (!_edit_serial_buffer_size) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Serial Buffer &Size:"), _edit_serial_buffer_size);

  // serial baud rate
  _edit_serial_baud_rate = new QComboBox();
  if (!_edit_serial_baud_rate) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  // see termios.h for valid baud rate values
  _edit_serial_baud_rate->addItem(tr("50"));
  _edit_serial_baud_rate->addItem(tr("75"));
  _edit_serial_baud_rate->addItem(tr("110"));
  _edit_serial_baud_rate->addItem(tr("134"));
  _edit_serial_baud_rate->addItem(tr("150"));
  _edit_serial_baud_rate->addItem(tr("200"));
  _edit_serial_baud_rate->addItem(tr("300"));
  _edit_serial_baud_rate->addItem(tr("600"));
  _edit_serial_baud_rate->addItem(tr("1200"));
  _edit_serial_baud_rate->addItem(tr("1800"));
  _edit_serial_baud_rate->addItem(tr("2400"));
  _edit_serial_baud_rate->addItem(tr("4800"));
  _edit_serial_baud_rate->addItem(tr("9600"));
  _edit_serial_baud_rate->addItem(tr("19200"));
  _edit_serial_baud_rate->addItem(tr("38400"));
  _edit_serial_baud_rate->addItem(tr("57600"));
  _edit_serial_baud_rate->addItem(tr("115200"));
  _edit_serial_baud_rate->addItem(tr("230400"));
  _layout->addRow(tr("&Baud Rate:"), _edit_serial_baud_rate);

  // data bits
  _edit_serial_data_bits =
    new Serial_config_data_bits_panel(_app_control, this);
  if (!_edit_serial_data_bits) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Data Bits:"), _edit_serial_data_bits);

  // parity bit
  _edit_serial_parity_bit =
    new Serial_config_parity_bit_panel(_app_control, this);
  if (!_edit_serial_parity_bit) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Parity Bit:"), _edit_serial_parity_bit);

  // stop bits
  _edit_serial_stop_bits =
    new Serial_config_stop_bits_panel(_app_control, this);
  if (!_edit_serial_stop_bits) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Stop Bits:"), _edit_serial_stop_bits);

  // auto start
  _edit_serial_auto_start = new QCheckBox();
  if (!_edit_serial_auto_start) {
    Log::fatal("Serial_config_panel::Serial_config_panel(): not enough memory");
  }
  _layout->addRow(tr("Aut&o Start:"), _edit_serial_auto_start);

  create_actions();
}

Serial_config_panel::~Serial_config_panel()
{
  // locally managed Qt objects
  _layout->deleteLater();
  _layout = 0;
  _edit_serial_in_dev_path->deleteLater();
  _edit_serial_in_dev_path = 0;
  _edit_serial_out_dev_path->deleteLater();
  _edit_serial_out_dev_path = 0;
  _edit_serial_buffer_size->deleteLater();
  _edit_serial_buffer_size = 0;
  _edit_serial_baud_rate->deleteLater();
  _edit_serial_baud_rate = 0;

  _edit_serial_data_bits->deleteLater();
  _edit_serial_data_bits = 0;
  _edit_serial_parity_bit->deleteLater();
  _edit_serial_parity_bit = 0;
  _edit_serial_stop_bits->deleteLater();
  _edit_serial_stop_bits = 0;
  _edit_serial_auto_start->deleteLater();
  _edit_serial_auto_start = 0;

  // elsewhere managed objects
  _app_control = 0;

  _dirty = false;
}

// TODO: Put the following method somewhere else where it is more
// prominent.
const int32_t
Serial_config_panel::try_parse_decimal_uint32(const std::string token,
                                              uint32_t *result)
{
  const char *token_as_c_star = token.c_str();
  char *err_pos;
  const uint32_t value = strtoul_l(token_as_c_star, &err_pos, 10,
                                   Config::LOCALE_CONFIG_C);
  if (err_pos == token_as_c_star + strlen(token_as_c_star)) {
    *result = value;
    return -1;
  } else {
    *result = 0;
    return err_pos - token_as_c_star;
  }
}

void
Serial_config_panel::save_values()
{
  int32_t err_pos;

  const std::string str_buffer_size =
    _edit_serial_buffer_size->text().toStdString();
  uint32_t buffer_size = 0;
  err_pos =
    try_parse_decimal_uint32(str_buffer_size, &buffer_size);
  if ((err_pos >= 0) || (buffer_size < 1) || (buffer_size > 65536)) {
    QMessageBox::warning(this, tr("Invalid serial Buffer Size"),
                         tr("Serial buffer size must be an integer value "
                            "between 1 and 65536."),
                         QMessageBox::Ok);
    return;
  }

  const std::string str_baud_rate =
    _edit_serial_baud_rate->currentText().toStdString();
  uint32_t baud_rate = 0;
  err_pos = try_parse_decimal_uint32(str_baud_rate, &baud_rate);
  if (err_pos >= 0) {
    // should never occur since we have a drop-down with fixed values
    Log::fatal("parsing serial baud rate failed");
  }

  Config *config = _app_control->get_config();
  config->
    set_serial_in_dev_path(_edit_serial_in_dev_path->text().toStdString());
  config->
    set_serial_out_dev_path(_edit_serial_out_dev_path->text().toStdString());
  config->set_serial_buffer_size(buffer_size);
  config->set_serial_baud_rate(baud_rate);
  _edit_serial_data_bits->save_values();
  _edit_serial_parity_bit->save_values();
  _edit_serial_stop_bits->save_values();
  config->set_serial_auto_start(_edit_serial_auto_start->isChecked());
  _dirty = false;
}

void
Serial_config_panel::load_values()
{
  const IConfig *config = _app_control->get_config();
  const std::string in_dev_path = config->get_serial_in_dev_path();
  _edit_serial_in_dev_path->setText(QString::fromStdString(in_dev_path));
  const std::string out_dev_path = config->get_serial_out_dev_path();
  _edit_serial_out_dev_path->setText(QString::fromStdString(out_dev_path));
  const uint32_t buffer_size = config->get_serial_buffer_size();
  _edit_serial_buffer_size->setText(QString::number(buffer_size));
  const uint32_t baud_rate = config->get_serial_baud_rate();
  const QString baud_rate_qstr = QString::number(baud_rate);
  int selection_index = _edit_serial_baud_rate->findText(baud_rate_qstr);
  if (selection_index > 0) {
    _edit_serial_baud_rate->setCurrentIndex(selection_index);
  } else {
    _edit_serial_baud_rate->setCurrentText(baud_rate_qstr);
  }
  _edit_serial_data_bits->load_values();
  _edit_serial_parity_bit->load_values();
  _edit_serial_stop_bits->load_values();
  const bool auto_start = config->get_serial_auto_start();
  _edit_serial_auto_start->setChecked(auto_start);
  _dirty = false;
}

const bool
Serial_config_panel::get_dirty() const
{
  return
    _dirty ||
    _edit_serial_data_bits->get_dirty() ||
    _edit_serial_parity_bit->get_dirty() ||
    _edit_serial_stop_bits->get_dirty();
}

void
Serial_config_panel::create_actions()
{
  connect(_edit_serial_in_dev_path,
          &QLineEdit::textEdited,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_serial_out_dev_path,
          &QLineEdit::textEdited,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_serial_buffer_size,
          &QLineEdit::textEdited,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_serial_baud_rate,
          QOverload<int>::of(&QComboBox::currentIndexChanged),
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_serial_baud_rate,
          &QComboBox::currentTextChanged,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_edit_serial_auto_start, &QCheckBox::stateChanged,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
