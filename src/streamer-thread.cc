/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <unistd.h>
#include <sstream>
#include <algorithm>
#include <streamer-thread.hh>
#include <log.hh>

Streamer_thread::Streamer_thread(App_control *app_control)
{
  if (!app_control) {
    Log::fatal("Main_window::Main_window(): app_control is NULL");
  }
  _app_control = app_control;

  _uarts = new std::map<const uint32_t, Uart *>();
  if (!_uarts) {
    Log::fatal("Streamer_thread::Streamer_thread(): "
               "not enough memory");
  }

  _lines = new std::map<const uint32_t, Line *>();
  if (!_lines) {
    Log::fatal("Streamer_thread::Streamer_thread(): "
               "not enough memory");
  }

  _event_listeners = new std::vector<ISerial_event_listener *>();
  if (!_event_listeners) {
    Log::fatal("Streamer_thread::Streamer_thread(): "
               "not enough memory");
  }

  _status_listeners = new std::vector<IStreamer_status_listener *>();
  if (!_status_listeners) {
    Log::fatal("Streamer_thread::Streamer_thread(): "
               "not enough memory");
  }

  const IConfig *config = _app_control->get_config();
  _com1 = new Uart(_app_control, std::string("COM1"),
                   config->get_serial_in_dev_path());
  if (!_com1) {
    Log::fatal("Serial_sniffer::Serial_sniffer(): not enough memory");
  }
  add_uart(_com1);

  _com2 = new Uart(_app_control, std::string("COM2"),
                   config->get_serial_in_dev_path());
  if (!_com2) {
    Log::fatal("Serial_sniffer::Serial_sniffer(): not enough memory");
  }
  add_uart(_com2);

  _com1->propagate_input_to(_com2);

  _pause_requested = false;
  _thread = 0;
  pthread_mutex_init(&_serialize_start_stop, 0);
}

Streamer_thread::~Streamer_thread()
{
  stop(true);

  // locally managed non-Qt objects
  _com1->stop_receiving(true);
  _com1->stop_transmitting(true);
  _com2->stop_receiving(true);
  _com2->stop_transmitting(true);
  remove_uart(_com1);
  remove_uart(_com2);
  pthread_mutex_destroy(&_serialize_start_stop);
  delete _event_listeners;
  _event_listeners = 0;
  delete _status_listeners;
  _status_listeners = 0;
  delete _uarts;
  _uarts = 0;
  delete _lines;
  _lines = 0;
  delete _com1;
  _com1 = 0;
  delete _com2;
  _com2 = 0;

  // elsewhere managed objects
  _app_control = 0;

  _pause_requested = false;
}

void
Streamer_thread::add_uart(Uart *uart)
{
  if (!uart) {
    Log::fatal("Streamer_thread::add_uart(): uart is NULL");
  }
  if (!_uarts) {
    Log::fatal("Streamer_thread::add_uart(): _uarts is NULL");
  }
  if (!_lines) {
    Log::fatal("Streamer_thread::add_uart(): _lines is NULL");
  }

  const uint32_t id = uart->get_id();
  std::map<const uint32_t, Uart *>::iterator iter = _uarts->find(id);
  if (iter != _uarts->end()) {
    std::stringstream msg;
    msg << "Streamer_thread::add_uart(): id "
        << id << " already assigned to uart "
        << iter->second->get_name();
    Log::fatal(msg.str());
  }
  (*_uarts)[id] = uart;

  const std::vector<const ILine_info *> lines = uart->get_all_lines();
  for (auto line_info = std::begin(lines);
       line_info != std::end(lines); ++line_info) {
    (*_lines)[(*line_info)->get_id()] = (Line *)(*line_info);
  }

  const int size = _event_listeners->size();
  for (int index = 0; index < size; index++) {
    ISerial_event_listener *listener = (*_event_listeners)[index];
    uart->add_event_listener(listener);
  }
}

void
Streamer_thread::remove_uart(Uart *uart)
{
  if (!uart) {
    Log::fatal("Streamer_thread::remove_uart(): uart is NULL");
  }
  if (!_uarts) {
    Log::fatal("Streamer_thread::remove_uart(): _uarts is NULL");
  }

  const int size = _event_listeners->size();
  for (int index = 0; index < size; index++) {
    ISerial_event_listener *listener = (*_event_listeners)[index];
    uart->remove_event_listener(listener);

    const std::vector<const ILine_info *> lines = uart->get_all_lines();
    for (auto line_info = std::begin(lines);
         line_info != std::end(lines); ++line_info) {
      ((Line *)(*line_info))->remove_event_listener(listener);
    }
  }

  const uint32_t id = uart->get_id();

  _uarts->erase(id);
}

const std::vector<const IUart_info *>
Streamer_thread::get_all_uarts() const
{
  std::vector<const IUart_info *> uarts = std::vector<const IUart_info *>();
  std::map<const uint32_t, Uart *>::iterator it = _uarts->begin();
  while (it != _uarts->end()) {
    uarts.push_back(it->second);
    it++;
  }
  return uarts;
}

Uart *
Streamer_thread::lookup_uart_by_id(const uint32_t id) const
{
  std::map<uint32_t, Uart *>::iterator it = _uarts->find(id);
  if (it == _uarts->end()) {
    return NULL;
  }
  return (*_uarts)[id];
}

Line *
Streamer_thread::lookup_line_by_id(const uint32_t id) const
{
  std::map<uint32_t, Line *>::iterator it = _lines->find(id);
  if (it == _lines->end()) {
    return NULL;
  }
  return (*_lines)[id];
}

const IUart_info *
Streamer_thread::get_uart_info(const uint32_t id) const
{
  const Uart *uart = lookup_uart_by_id(id);
  if (!uart) {
    Log::fatal("Streamer_thread::get_uart_info(): "
               "no uart found with specified id");
  }
  return uart;
}

void
Streamer_thread::start_line(const uint32_t id)
{
  Line *line = lookup_line_by_id(id);
  if (!line) {
    Log::fatal("Streamer_thread::start_line(): "
               "no line found with specified id");
  }
  line->start();
}

void
Streamer_thread::stop_line(const uint32_t id)
{
  Line *line = lookup_line_by_id(id);
  if (!line) {
    Log::fatal("Streamer_thread::stop_line(): "
               "no line found with specified id");
  }
  {
    std::stringstream msg;
    msg << "[STRM1] stop_line "
        << id;
    Log::debug(msg.str());
  }
  line->stop();
  {
    std::stringstream msg;
    msg << "[STRM2] stop_line "
        << id;
    Log::debug(msg.str());
  }
}

void
Streamer_thread::add_event_listener(ISerial_event_listener *listener)
{
  if (!listener) {
    Log::fatal("Streamer_thread::add_event_listener(): "
               "listener is NULL");
  }
  if (!_event_listeners) {
    Log::fatal("Streamer_thread::add_event_listener(): "
               "_event_listeners is NULL");
  }
  _event_listeners->push_back(listener);

  for (auto entry = std::begin(*_uarts);
       entry != std::end(*_uarts); ++entry) {
    Uart *uart = entry->second;
    if (!uart) {
      std::stringstream msg;
      msg << "Streamer_thread::add_event-listener(): uart "
          << entry->first << " is NULL";
      Log::fatal(msg.str());
    }
    uart->add_event_listener(listener);
  }
}

void
Streamer_thread::remove_event_listener(ISerial_event_listener *listener)
{
  if (!listener) {
    Log::fatal("Streamer_thread::remove_event_listener(): "
               "listener is NULL");
  }
  if (!_event_listeners) {
    Log::fatal("Streamer_thread::remove_event_listener(): "
               "_event_listeners is NULL");
  }
  auto tail_start =
    std::remove(_event_listeners->begin(),
                _event_listeners->end(),
                listener);
  _event_listeners->erase(tail_start, _event_listeners->end());

  for (auto entry = std::begin(*_uarts);
       entry != std::end(*_uarts); ++entry) {
    Uart *uart = entry->second;
    if (!uart) {
      std::stringstream msg;
      msg << "Streamer_thread::add_event-listener(): uart "
          << entry->first << " is NULL";
      Log::fatal(msg.str());
    }
    uart->remove_event_listener(listener);
  }
}

void
Streamer_thread::add_status_listener(IStreamer_status_listener *listener)
{
  if (!listener) {
    Log::fatal("Streamer_thread::add_status_listener(): "
               "listener is NULL");
  }
  if (!_status_listeners) {
    Log::fatal("Streamer_thread::add_status_listener(): "
               "_status_listeners is NULL");
  }
  _status_listeners->push_back(listener);
}

void
Streamer_thread::remove_status_listener(IStreamer_status_listener *listener)
{
  if (!listener) {
    Log::fatal("Streamer_thread::remove_status_listener(): "
               "listener is NULL");
  }
  if (!_status_listeners) {
    Log::fatal("Streamer_thread::remove_status_listener(): "
               "_status_listeners is NULL");
  }
  auto tail_start =
    std::remove(_status_listeners->begin(),
                _status_listeners->end(),
                listener);
  _status_listeners->erase(tail_start, _status_listeners->end());
}

void *
Streamer_thread::p_loop(Streamer_thread *streamer_thread)
{
  if (!streamer_thread) {
    Log::fatal("Streamer_thread::p_loop(): streamer_thread is NULL");
  }
  streamer_thread->loop();
  return 0;
}

inline void
Streamer_thread::notify_event(const Serial_event *event)
{
  const int size = _event_listeners->size();
  for (int index = 0; index < size; index++) {
    ISerial_event_listener *listener = (*_event_listeners)[index];
    listener->notify_event(event);
  }
}

inline void
Streamer_thread::stream_started() {
  const int size = _status_listeners->size();
  for (int index = 0; index < size; index++) {
    IStreamer_status_listener *listener = (*_status_listeners)[index];
    listener->stream_started();
  }
}

inline void
Streamer_thread::stream_stopped() {
  const int size = _status_listeners->size();
  for (int index = 0; index < size; index++) {
    IStreamer_status_listener *listener = (*_status_listeners)[index];
    listener->stream_stopped();
  }
}

void
Streamer_thread::loop()
{
  Log::debug("enter streamer thread loop");
  while (!_pause_requested) {
  }
  _pause_requested = false;
  Log::debug("leave streamer thread loop");
  pthread_exit(0);
}

const bool
Streamer_thread::is_running() const
{
  return _thread != 0;
}

void
Streamer_thread::start()
{
  pthread_mutex_lock(&_serialize_start_stop);
  if (!is_running()) {
    stream_started();
    pthread_create(&_thread,
                   NULL,
                   (void * (*)(void *))p_loop,
                   this);

    for (auto entry = std::begin(*_uarts);
         entry != std::end(*_uarts); ++entry) {
      Uart *uart = entry->second;
      if (!uart) {
        std::stringstream msg;
        msg << "Streamer_thread::start(): uart "
            << entry->first << " is NULL";
        Log::error(msg.str());
        sleep(1);
        continue;
      }
      // TODO
      /*
      const Serial_event event = Serial_event::create_stream_started(uart);
      received_event(&event);
      */
    }

  } else {
    Log::warn("Streamer_thread::start(): already running");
  }
  pthread_mutex_unlock(&_serialize_start_stop);
}

void
Streamer_thread::stop(const bool ignore_status)
{
  pthread_mutex_lock(&_serialize_start_stop);
  if (is_running()) {
    _pause_requested = true;
    void *user_ptr;
    const int result = pthread_join(_thread, &user_ptr);
    if (result) {
      std::stringstream msg;
      msg << "Streamer_thread::stop(): pausing failed with error " << result;
      Log::fatal(msg.str());
    }
    _thread = 0;

    for (auto entry = std::begin(*_uarts);
         entry != std::end(*_uarts); ++entry) {
      Uart *uart = entry->second;
      if (!uart) {
        std::stringstream msg;
        msg << "Streamer_thread::stop(): uart "
            << entry->first << " is NULL";
        Log::error(msg.str());
        sleep(1);
        continue;
      }
      // TODO
      /*
      const Serial_event event = Serial_event::create_stream_stopped(uart);
      received_event(&event);
      */
    }

    stream_stopped();
  } else if (!ignore_status) {
    Log::warn("Streamer_thread::stop(): already stopped");
  }
  pthread_mutex_unlock(&_serialize_start_stop);
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
