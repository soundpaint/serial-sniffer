/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <log.hh>
#include <chrono>
#include <cstdlib>
#include <iomanip>

Log::Level
Log::_level = Log::Level::debug;

pthread_mutex_t *Log::get_lock()
{
  static Log instance;
  return &(instance._serialize_lock);
}

const std::string
Log::get_timestamp()
{
  const std::chrono::system_clock::time_point tp_now =
    std::chrono::system_clock::now();
  const time_t tt_now = std::chrono::system_clock::to_time_t(tp_now);
  const int now_milliseconds =
    ((long)tp_now.time_since_epoch().count() * 1000 *
     std::chrono::system_clock::period::num /
     std::chrono::system_clock::period::den) % 1000;
  std::stringstream timestamp;
  timestamp << std::put_time(std::gmtime(&tt_now), "%T")
            << "."
            << std::setw(3) << std::setfill('0') << now_milliseconds;
  // C++20: << std::format("{:03d}", now_milliseconds) with header <format>
  return timestamp.str();
}

const std::string
Log::format_entry(const std::string level,
                  const std::string msg)
{
  std::stringstream entry;
  entry << "["
        << level
        << "] "
        << get_timestamp()
        << ": "
        << msg << "\r\n";
  return entry.str();
}

void
Log::any(const std::string msg, const Level level, const std::string level_name)
{
  if (_level < level) return;
  pthread_mutex_lock(get_lock());
  std::cerr << "[" << level_name << "] " << msg << "\r\n" << std::flush;
  pthread_mutex_unlock(get_lock());
}

void
Log::fatal(const std::string msg)
{
  any(msg, Level::fatal, "fatal");
  //exit(EXIT_FAILURE);
  throw 20;
}

void
Log::error(const std::string msg)
{
  any(msg, Level::error, "error");
}

void
Log::warn(const std::string msg)
{
  any(msg, Level::warn, "warn");
}

void
Log::info(const std::string msg)
{
  any(msg, Level::info, "info");
}

void
Log::debug(const std::string msg)
{
  any(msg, Level::debug, "debug");
}

void
Log::trace(const std::string msg)
{
  any(msg, Level::trace, "trace");
}

void
Log::set_level(const Level level)
{
  _level = level;
}

Log::Log()
{
  pthread_mutex_init(&_serialize_lock, 0);
  // when called, have lock already acquired => immediately write to cout
  std::cout << "[debug] starting Log\r\n" << std::flush;
}

Log::~Log()
{
  debug("shutting down Log");
  pthread_mutex_destroy(&_serialize_lock);
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
