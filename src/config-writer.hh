/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef CONFIG_WRITER_HH
#define CONFIG_WRITER_HH

#include <xercesc/dom/DOM.hpp>
#include <config.hh>

class Config_writer
{
public:
  Config_writer(const Config *config);
  virtual ~Config_writer();
  void write_document(const std::string file_path);
private:
  static const std::string STR_BOOL_FALSE;
  static const std::string STR_BOOL_TRUE;
  const XMLCh *xmlch_impl_id;
  const XMLCh *xmlch_entity_cfg_id;
  const XMLCh *xmlch_entity_cfg_value;
  const XMLCh *xmlch_namespace_uri;
  const XMLCh *xmlch_dtd_id;
  const XMLCh *xmlch_public_id;
  const XMLCh *xmlch_system_id;
  const XMLCh *xmlch_root_elem_name;
  const XMLCh *xmlch_xsi_ns_id;
  const XMLCh *xmlch_xsi_ns_value;
  const XMLCh *xmlch_default_ns_id;
  const XMLCh *xmlch_default_ns_value;
  const XMLCh *xmlch_cfg_ns_id;
  const XMLCh *xmlch_cfg_ns_value;
  const XMLCh *xmlch_schema_location_id;
  const XMLCh *xmlch_schema_location_value;
  const Config *_config;
  void write_document_internal(const std::string file_path);
  void build_document(xercesc::DOMDocument *document,
                      xercesc::DOMElement *elem_config);
  void build_devices(xercesc::DOMDocument *document,
                     xercesc::DOMElement *elem_devices);
  void build_logging(xercesc::DOMDocument *document,
                     xercesc::DOMElement *elem_logging);
  void build_kiosk_mode(xercesc::DOMDocument *document,
                        xercesc::DOMElement *elem_kiosk_mode);
  void build_key_bindings(xercesc::DOMDocument *document,
                          xercesc::DOMElement *elem_key_bindings);

  void insert_key_node(xercesc::DOMDocument *document,
                       xercesc::DOMElement *elem_key_bindings,
                       const IKey_bindings::Action action,
                       const int key);
  xercesc::DOMElement *
  build_action(xercesc::DOMDocument *document,
               xercesc::DOMElement *elem_action,
               const IKey_bindings::Action action);
  void build_key(xercesc::DOMDocument *document,
                 xercesc::DOMElement *elem_keys,
                 const int key);
  void build_audio(xercesc::DOMDocument *document,
                   xercesc::DOMElement *elem_audio);
  void build_path(xercesc::DOMDocument *document,
                  xercesc::DOMElement *elem_parent,
                  const std::string text);
  xercesc::DOMElement *create_element(xercesc::DOMDocument *document,
                                      xercesc::DOMElement *elem_parent,
                                      const char *str_q_name);
  void add_text(xercesc::DOMDocument *document,
                xercesc::DOMNode *node_parent,
                const std::string str_text);
  void add_comment(xercesc::DOMDocument *document,
                   xercesc::DOMNode *node_parent,
                   const std::string str_comment,
                   const bool prepend_empty_line = true,
                   const bool append_empty_line = true);
  void add_line_break(xercesc::DOMDocument *document,
                      xercesc::DOMNode *node_parent);
  const std::string bool_as_text(const bool value);
  void prepend_xml_declaration(std::string *str_document) const;
  void add_missing_entity_declaration(std::string *str_document) const;
  void fix_attributes_indentation(std::string *str_document) const;
  void fix_entity_references(std::string *str_document) const;
  void fix_default_namespace(std::string *str_document) const;
  void fix_xml(std::string *str_document) const;
  void write_to_file(const std::string *content,
                     const std::string file_path) const;
  void write_xml(const xercesc::DOMNode *node,
                 const std::string file_path) const;
};

#endif /* CONFIG_WRITER_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
