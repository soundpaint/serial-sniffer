/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef LOG_HH
#define LOG_HH

#include <iostream>
#include <mutex>

class Log
{
public:
  enum class Level: uint16_t {
    off = 0,
    fatal = 1,
    error = 2,
    warn = 3,
    info = 4,
    debug = 5,
    trace = 6
  };

  static void fatal(const std::string msg);
  static void error(const std::string msg);
  static void warn(const std::string msg);
  static void info(const std::string msg);
  static void debug(const std::string msg);
  static void trace(const std::string msg);
  static void set_level(const Level level);
private:
  static Level _level;
  static const std::string format_entry(const std::string level,
                                        const std::string msg);
  static void any(const std::string msg, const Level level,
                  const std::string level_name);
  static std::lock_guard<std::mutex> get_lock();
  static const std::string get_timestamp();
  std::mutex _serialize_lock;
  Log();
  virtual ~Log();
};

#endif /* LOG_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
