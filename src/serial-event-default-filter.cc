/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <serial-event-default-filter.hh>
#include <log.hh>

Serial_event_default_filter::
Serial_event_default_filter(const ILine_info *line_info,
                            const Serial_event::event_type_t event_type)
{
  _line_info = line_info;
  _event_type = event_type;
}

Serial_event_default_filter::~Serial_event_default_filter()
{
  _event_type = Serial_event::none;

  // elsewhere managed objects
  _line_info = 0;
}

const ILine_info *
Serial_event_default_filter::get_line_info() const
{
  return _line_info;
}

void
Serial_event_default_filter::set_line_info(const ILine_info *line_info)
{
  _line_info = line_info;
}

const Serial_event::event_type_t
Serial_event_default_filter::get_event_type() const
{
  return _event_type;
}

void
Serial_event_default_filter::
set_event_type(const Serial_event::event_type_t event_type)
{
  _event_type = event_type;
}

const bool
Serial_event_default_filter::accept0(const Serial_event *event) const
{
  if ((_line_info) &&
      (_line_info->get_id() != event->get_line_info()->get_id()))
    return false;
  const Serial_event::event_type_t event_type = event->get_event_type();
  if ((event_type != Serial_event::none) &&
      (event_type != _event_type))
    return false;
  return true;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
