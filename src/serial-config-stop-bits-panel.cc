/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <serial-config-stop-bits-panel.hh>
#include <log.hh>

Serial_config_stop_bits_panel::
Serial_config_stop_bits_panel(App_control *app_control, QWidget *parent)
  : QWidget(parent)
{
  if (!app_control) {
    Log::fatal("Serial_config_parity_bit_panel::Serial_config_parity_bit_panel(): "
               "app_control is NULL");
  }
  _app_control = app_control;

  _layout = new QHBoxLayout();
  if (!_layout) {
    Log::fatal("Serial_config_stop_bits_panel::Serial_config_stop_bits_panel():  "
               "not enough memory");
  }
  _layout->setContentsMargins(0, 0, 0, 0);
  setLayout(_layout);

  // one
  _rb_one = new QRadioButton(tr("&1"), this);
  if (!_rb_one) {
    Log::fatal("Serial_config_stop_bits_panel::Serial_config_stop_bits_panel():  "
               "not enough memory");
  }
  _layout->addWidget(_rb_one);

  // two
  _rb_two = new QRadioButton(tr("&2"), this);
  if (!_rb_two) {
    Log::fatal("Serial_config_stop_bits_panel::Serial_config_stop_bits_panel(): "
               "not enough memory");
  }
  _layout->addWidget(_rb_two);

  _layout->addStretch();
  create_actions();
}

Serial_config_stop_bits_panel::~Serial_config_stop_bits_panel()
{
  // locally managed Qt objects
  _layout->deleteLater();
  _layout = 0;
  _rb_one->deleteLater();
  _rb_one = 0;
  _rb_two->deleteLater();
  _rb_two = 0;

  // elsewhere managed objects
  _app_control = 0;

  _dirty = false;
}

const int CASE_EXCEPTION = 42;

void
Serial_config_stop_bits_panel::save_values()
{
  Config *config = _app_control->get_config();
  if (_rb_one->isChecked()) {
    config->set_serial_stop_bits(IConfig::one);
  } else if (_rb_two->isChecked()) {
    config->set_serial_stop_bits(IConfig::two);
  } else {
    // keep config unmodified
  }
  _dirty = false;
}

void
Serial_config_stop_bits_panel::load_values()
{
  const IConfig *config = _app_control->get_config();
  const IConfig::stop_bits_t stop_bits = config->get_serial_stop_bits();
  switch (stop_bits) {
  case IConfig::one:
    _rb_one->setChecked(true);
    break;
  case IConfig::two:
    _rb_two->setChecked(true);
    break;
  default:
    throw CASE_EXCEPTION;
  }
  _dirty = false;
}

const bool
Serial_config_stop_bits_panel::get_dirty() const
{
  return
    _dirty;
}

void
Serial_config_stop_bits_panel::create_actions()
{
  connect(_rb_one, &QRadioButton::clicked,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
  connect(_rb_two, &QRadioButton::clicked,
          _app_control, [=](){
            _dirty = true;
            _app_control->config_dirty_changed();
          });
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
