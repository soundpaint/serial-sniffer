/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef ICONFIG_HH
#define ICONFIG_HH

#include <string>
#include <inttypes.h>
#include <key-bindings.hh>

class IConfig
{
public:
  enum data_bits_t {
    seven,
    eight
  };

  enum parity_bit_t {
    none,
    even,
    odd
  };

  enum stop_bits_t {
    one,
    two
  };

  virtual ~IConfig() = 0;
  virtual const std::string get_serial_in_dev_path() const = 0;
  virtual const std::string get_serial_out_dev_path() const = 0;
  virtual const uint32_t get_serial_buffer_size() const = 0;
  virtual const uint32_t get_serial_baud_rate() const = 0;
  virtual const data_bits_t get_serial_data_bits() const = 0;
  virtual const parity_bit_t get_serial_parity_bit() const = 0;
  virtual const stop_bits_t get_serial_stop_bits() const = 0;
  virtual const bool get_serial_auto_start() const = 0;
  virtual const bool get_log_enable_file_logging_on_start() const = 0;
  virtual const std::string get_log_dir_path() const = 0;
  virtual const std::string get_log_filename_pattern() const = 0;
  virtual const bool get_log_append_on_start() const = 0;
  virtual const bool get_full_screen() const = 0;
  virtual const uint16_t get_window_width() const = 0;
  virtual const uint16_t get_window_height() const = 0;
  virtual const uint16_t get_control_show_after_pressing() const = 0;
  virtual const uint16_t get_control_autohide_after() const = 0;
  virtual const bool get_enable_cursor() const = 0;
  virtual const bool get_enable_button_quit() const = 0;
  virtual const IKey_bindings::Action get_action_for_key(const int key) const = 0;
  virtual const std::map<int, IKey_bindings::Action>::iterator
  get_action_key_iterator_begin() const = 0;
  virtual const std::map<int, IKey_bindings::Action>::iterator
  get_action_key_iterator_end() const = 0;
  virtual const bool get_enable_audio() const = 0;
  virtual const bool get_enable_volume_control() const = 0;
  virtual const double get_audio_sample_scale() const = 0;
  virtual const int get_audio_sample_rate() const = 0;
  virtual const int get_audio_channels() const = 0;
  virtual const bool get_alsa_verbose() const = 0;
  virtual const std::string get_alsa_playback_device() const = 0;
  virtual const int get_alsa_buffer_time() const = 0;
  virtual const int get_alsa_period_time() const = 0;
  virtual const double get_audio_initial_volume() const = 0;
  virtual void save(const std::string file_path) const = 0;
  virtual void to_string(std::stringstream *buffer) const = 0;
};

inline IConfig::~IConfig() {}

#endif /* ICONFIG_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
