/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <config.hh>
#include <sstream>
#include <log.hh>
#include <config-reader.hh>
#include <config-writer.hh>

const locale_t
Config::LOCALE_CONFIG_C = create_locale_c();

const locale_t
Config::create_locale_c()
{
  return newlocale(LC_NUMERIC, "C", 0);
}

const std::locale
Config::LOCALE_CONFIG_CPP = std::locale("C");

const std::string
Config::SERIAL_DATA_BITS_SEVEN_TO_STR = std::string("7");

const std::string
Config::SERIAL_DATA_BITS_EIGHT_TO_STR = std::string("8");

const std::string
Config::SERIAL_PARITY_BIT_NONE_TO_STR = std::string("none");

const std::string
Config::SERIAL_PARITY_BIT_EVEN_TO_STR = std::string("even");

const std::string
Config::SERIAL_PARITY_BIT_ODD_TO_STR = std::string("odd");

const std::string
Config::SERIAL_STOP_BITS_ONE_TO_STR = std::string("1");

const std::string
Config::SERIAL_STOP_BITS_TWO_TO_STR = std::string("2");

const std::string
Config::DEFAULT_SERIAL_IN_DEV_PATH = std::string("/dev/serial1");

const std::string
Config::DEFAULT_SERIAL_OUT_DEV_PATH = std::string("/dev/serial2");

const uint32_t
Config::DEFAULT_SERIAL_BUFFER_SIZE = 256;

const uint32_t
Config::DEFAULT_SERIAL_BAUD_RATE = 9600;

const Config::data_bits_t
Config::DEFAULT_SERIAL_DATA_BITS = eight;

const Config::parity_bit_t
Config::DEFAULT_SERIAL_PARITY_BIT = none;

const Config::stop_bits_t
Config::DEFAULT_SERIAL_STOP_BITS = two;

const bool
Config::DEFAULT_SERIAL_AUTO_START = true;

const bool
Config::DEFAULT_LOG_ENABLE_FILE_LOGGING_ON_START = true;

const std::string
Config::DEFAULT_LOG_DIR_PATH = std::string("/tmp");

const std::string
Config::DEFAULT_LOG_FILENAME_PATTERN = std::string("serial-sniffer-log_$DATE");

const bool
Config::DEFAULT_LOG_APPEND_ON_START = true;

const bool
Config::DEFAULT_FULL_SCREEN = true;

const uint16_t
Config::DEFAULT_WINDOW_WIDTH = 800;

const uint16_t
Config::DEFAULT_WINDOW_HEIGHT = 640;

const uint16_t
Config::DEFAULT_CONTROL_SHOW_AFTER_PRESSING = 0;

const uint16_t
Config::DEFAULT_CONTROL_AUTOHIDE_AFTER = 10;

const bool
Config::DEFAULT_ENABLE_CURSOR = false;

const bool
Config::DEFAULT_ENABLE_BUTTON_QUIT = true;

const bool
Config::DEFAULT_ENABLE_AUDIO = true;

const bool
Config::DEFAULT_ENABLE_VOLUME_CONTROL = true;

const double
Config::DEFAULT_AUDIO_SAMPLE_SCALE = 1.0;

const int
Config::DEFAULT_AUDIO_SAMPLE_RATE = 44100;

const int
Config::DEFAULT_AUDIO_CHANNELS = 2;

const bool
Config::DEFAULT_ALSA_VERBOSE = true;

const std::string
Config::DEFAULT_ALSA_PLAYBACK_DEVICE = std::string("default");

const int
Config::DEFAULT_ALSA_BUFFER_TIME = 250000;

const int
Config::DEFAULT_ALSA_PERIOD_TIME = 50000;

const double
Config::DEFAULT_AUDIO_INITIAL_VOLUME = 0.5;

Config::Config(const char *path)
{
  set_serial_in_dev_path(DEFAULT_SERIAL_IN_DEV_PATH);
  set_serial_out_dev_path(DEFAULT_SERIAL_OUT_DEV_PATH);
  set_serial_buffer_size(DEFAULT_SERIAL_BUFFER_SIZE);
  set_serial_baud_rate(DEFAULT_SERIAL_BAUD_RATE);
  set_serial_data_bits(DEFAULT_SERIAL_DATA_BITS);
  set_serial_parity_bit(DEFAULT_SERIAL_PARITY_BIT);
  set_serial_stop_bits(DEFAULT_SERIAL_STOP_BITS);
  set_serial_auto_start(DEFAULT_SERIAL_AUTO_START);
  set_log_enable_file_logging_on_start(DEFAULT_LOG_ENABLE_FILE_LOGGING_ON_START);
  set_log_dir_path(DEFAULT_LOG_DIR_PATH);
  set_log_filename_pattern(DEFAULT_LOG_FILENAME_PATTERN);
  set_log_append_on_start(DEFAULT_LOG_APPEND_ON_START);
  set_full_screen(DEFAULT_FULL_SCREEN);
  set_window_width(DEFAULT_WINDOW_WIDTH);
  set_window_height(DEFAULT_WINDOW_HEIGHT);
  set_control_show_after_pressing(DEFAULT_CONTROL_SHOW_AFTER_PRESSING);
  set_control_autohide_after(DEFAULT_CONTROL_AUTOHIDE_AFTER);
  set_enable_cursor(DEFAULT_ENABLE_CURSOR);
  set_enable_button_quit(DEFAULT_ENABLE_BUTTON_QUIT);
  set_enable_audio(DEFAULT_ENABLE_AUDIO);
  set_enable_volume_control(DEFAULT_ENABLE_VOLUME_CONTROL);
  set_audio_sample_scale(DEFAULT_AUDIO_SAMPLE_SCALE);
  set_audio_sample_rate(DEFAULT_AUDIO_SAMPLE_RATE);
  set_audio_channels(DEFAULT_AUDIO_CHANNELS);
  set_alsa_verbose(DEFAULT_ALSA_VERBOSE);
  set_alsa_playback_device(DEFAULT_ALSA_PLAYBACK_DEVICE);
  set_alsa_buffer_time(DEFAULT_ALSA_BUFFER_TIME);
  set_alsa_period_time(DEFAULT_ALSA_PERIOD_TIME);
  set_audio_initial_volume(DEFAULT_AUDIO_INITIAL_VOLUME);
  _key_bindings = new Key_bindings();
  if (!_key_bindings) {
    Log::fatal("Config::Config(): not enough memory");
  }
  Config_reader *config_reader = new Config_reader(this);
  if (!config_reader) {
    Log::fatal("Config::Config(): not enough memory");
  }
  config_reader->parse(path);
  delete config_reader;
}

Config::~Config()
{
  _serial_in_dev_path.clear();
  _serial_out_dev_path.clear();
  _serial_buffer_size = 0;
  _serial_baud_rate = 0;
  _serial_data_bits = seven;
  _serial_parity_bit = none;
  _serial_stop_bits = one;
  _serial_auto_start = false;
  _log_enable_file_logging_on_start = false;
  _log_dir_path.clear();
  _log_filename_pattern.clear();
  _log_append_on_start = false;
  _full_screen = 0;
  _window_width = 0;
  _window_height = 0;
  _control_show_after_pressing = 0;
  _control_autohide_after = 0;
  _enable_cursor = false;
  _enable_button_quit = false;
  _enable_audio = false;
  _enable_volume_control = false;
  _audio_sample_scale = 1.0;
  _audio_sample_rate = 0;
  _audio_channels = 0;
  _alsa_verbose = false;
  _alsa_playback_device.clear();
  _alsa_buffer_time = 0;
  _alsa_period_time = 0;
  _audio_initial_volume = 0.0;
  delete _key_bindings;
  _key_bindings = 0;
}

const std::string
Config::data_bits_to_string(const data_bits_t data_bits)
{
  switch (data_bits) {
  case seven:
    return SERIAL_DATA_BITS_SEVEN_TO_STR;
  case eight:
    return SERIAL_DATA_BITS_EIGHT_TO_STR;
  default:
    throw new std::exception();
  }
}

const std::string
Config::parity_bit_to_string(const parity_bit_t parity_bit)
{
  switch (parity_bit) {
  case none:
    return SERIAL_PARITY_BIT_NONE_TO_STR;
  case even:
    return SERIAL_PARITY_BIT_EVEN_TO_STR;
  case odd:
    return SERIAL_PARITY_BIT_ODD_TO_STR;
  default:
    throw new std::exception();
  }
}

const std::string
Config::stop_bits_to_string(const stop_bits_t stop_bits)
{
  switch (stop_bits) {
  case one:
    return SERIAL_STOP_BITS_ONE_TO_STR;
  case two:
    return SERIAL_STOP_BITS_TWO_TO_STR;
  default:
    throw new std::exception();
  }
}

void
Config::set_serial_in_dev_path(const std::string dev_path)
{
  _serial_in_dev_path.clear();
  _serial_in_dev_path.append(dev_path);
}

const std::string
Config::get_serial_in_dev_path() const
{
  return _serial_in_dev_path;
}

void
Config::set_serial_out_dev_path(const std::string dev_path)
{
  _serial_out_dev_path.clear();
  _serial_out_dev_path.append(dev_path);
}

const std::string
Config::get_serial_out_dev_path() const
{
  return _serial_out_dev_path;
}

void
Config::set_serial_buffer_size(const uint32_t buffer_size)
{
  _serial_buffer_size = buffer_size;
}

const uint32_t
Config::get_serial_buffer_size() const
{
  return _serial_buffer_size;
}

void
Config::set_serial_baud_rate(const uint32_t baud_rate)
{
  _serial_baud_rate = baud_rate;
}

const uint32_t
Config::get_serial_baud_rate() const
{
  return _serial_baud_rate;
}

void
Config::set_serial_data_bits(const data_bits_t data_bits)
{
  _serial_data_bits = data_bits;
}

const Config::data_bits_t
Config::get_serial_data_bits() const
{
  return _serial_data_bits;
}

void
Config::set_serial_parity_bit(const parity_bit_t parity_bit)
{
  _serial_parity_bit = parity_bit;
}

const Config::parity_bit_t
Config::get_serial_parity_bit() const
{
  return _serial_parity_bit;
}

void
Config::set_serial_stop_bits(const stop_bits_t stop_bits)
{
  _serial_stop_bits = stop_bits;
}

const Config::stop_bits_t
Config::get_serial_stop_bits() const
{
  return _serial_stop_bits;
}

void
Config::set_serial_auto_start(const bool auto_start)
{
  _serial_auto_start = auto_start;
}

const bool
Config::get_serial_auto_start() const
{
  return _serial_auto_start;
}

void
Config::set_log_enable_file_logging_on_start(const bool enable)
{
  _log_enable_file_logging_on_start = enable;
}

const bool
Config::get_log_enable_file_logging_on_start() const
{
  return _log_enable_file_logging_on_start;
}

void
Config::set_log_dir_path(const std::string dir_path)
{
  _log_dir_path.clear();
  _log_dir_path.append(dir_path);
}

const std::string
Config::get_log_dir_path() const
{
  return _log_dir_path;
}

void
Config::set_log_filename_pattern(const std::string filename_pattern)
{
  _log_filename_pattern.clear();
  _log_filename_pattern.append(filename_pattern);
}

const std::string
Config::get_log_filename_pattern() const
{
  return _log_filename_pattern;
}

void
Config::set_log_append_on_start(const bool append)
{
  _log_append_on_start = append;
}

const bool
Config::get_log_append_on_start() const
{
  return _log_append_on_start;
}

void
Config::set_full_screen(const bool full_screen)
{
  _full_screen = full_screen;
}

const bool
Config::get_full_screen() const
{
  return _full_screen;
}

void
Config::set_window_width(const uint16_t window_width)
{
  _window_width = window_width;
}

const uint16_t
Config::get_window_width() const
{
  return _window_width;
}

void
Config::set_window_height(const uint16_t window_height)
{
  _window_height = window_height;
}

const uint16_t
Config::get_window_height() const
{
  return _window_height;
}

void
Config::set_control_show_after_pressing(const uint16_t control_show_after_pressing)
{
  _control_show_after_pressing = control_show_after_pressing;
}

const uint16_t
Config::get_control_show_after_pressing() const
{
  return _control_show_after_pressing;
}

void
Config::set_control_autohide_after(const uint16_t control_autohide_after)
{
  _control_autohide_after = control_autohide_after;
}

const uint16_t
Config::get_control_autohide_after() const
{
  return _control_autohide_after;
}

void
Config::set_enable_cursor(const bool enable_cursor)
{
  _enable_cursor = enable_cursor;
}

const bool
Config::get_enable_cursor() const
{
  return _enable_cursor;
}

void
Config::set_enable_button_quit(const bool enable_button_quit)
{
  _enable_button_quit = enable_button_quit;
}

const bool
Config::get_enable_button_quit() const
{
  return _enable_button_quit;
}

void
Config::bind_key_to_action(const int key, const IKey_bindings::Action action)
{
  _key_bindings->bind_key_to_action(key, action);
}

const IKey_bindings::Action
Config::get_action_for_key(const int key) const
{
  return _key_bindings->get_action_for_key(key);
}

const std::map<int, IKey_bindings::Action>::iterator
Config::get_action_key_iterator_begin() const
{
  return _key_bindings->iterator_begin();
}

const std::map<int, IKey_bindings::Action>::iterator
Config::get_action_key_iterator_end() const
{
  return _key_bindings->iterator_end();
}

void
Config::set_enable_audio(const bool enable_audio)
{
  _enable_audio = enable_audio;
}

const bool
Config::get_enable_audio() const
{
  return _enable_audio;
}

void
Config::set_enable_volume_control(const bool enable_volume_control)
{
  _enable_volume_control = enable_volume_control;
}

const bool
Config::get_enable_volume_control() const
{
  return _enable_volume_control;
}

void
Config::set_audio_sample_scale(const double audio_sample_scale)
{
  _audio_sample_scale = audio_sample_scale;
}

const double
Config::get_audio_sample_scale() const
{
  return _audio_sample_scale;
}

void
Config::set_audio_sample_rate(const int audio_sample_rate)
{
  _audio_sample_rate = audio_sample_rate;
}

const int
Config::get_audio_sample_rate() const
{
  return _audio_sample_rate;
}

void
Config::set_audio_channels(const int audio_channels)
{
  _audio_channels = audio_channels;
}

const int
Config::get_audio_channels() const
{
  return _audio_channels;
}

void
Config::set_alsa_verbose(const bool alsa_verbose)
{
  _alsa_verbose = alsa_verbose;
}

const bool
Config::get_alsa_verbose() const
{
  return _alsa_verbose;
}

void
Config::set_alsa_playback_device(const std::string alsa_playback_device)
{
  _alsa_playback_device.clear();
  _alsa_playback_device.append(alsa_playback_device);
}

const std::string
Config::get_alsa_playback_device() const
{
  return _alsa_playback_device;
}

void
Config::set_alsa_buffer_time(const int alsa_buffer_time)
{
  _alsa_buffer_time = alsa_buffer_time;
}

const int
Config::get_alsa_buffer_time() const
{
  return _alsa_buffer_time;
}

void
Config::set_alsa_period_time(const int alsa_period_time)
{
  _alsa_period_time = alsa_period_time;
}

const int
Config::get_alsa_period_time() const
{
  return _alsa_period_time;
}

void
Config::set_audio_initial_volume(const double audio_initial_volume)
{
  _audio_initial_volume = audio_initial_volume;
}

const double
Config::get_audio_initial_volume() const
{
  return _audio_initial_volume;
}

void
Config::save(const std::string file_path) const
{
  Config_writer *writer = new Config_writer(this);
  if (!writer) {
    Log::fatal("Config::save(): not enough memory");
  }
  writer->write_document(file_path);
  delete writer;
  writer = 0;
}

void
Config::to_string(std::stringstream *buffer) const
{
  (*buffer) << std::endl << "==== Devices ====" << std::endl;
  (*buffer) << "serial in dev path: " << _serial_in_dev_path << std::endl;
  (*buffer) << "serial out dev path: " << _serial_out_dev_path << std::endl;
  (*buffer) << "buffer size: " << _serial_buffer_size << std::endl;
  (*buffer) << "baud rate: " << _serial_baud_rate << std::endl;
  (*buffer) << "data bits: " << ((uint32_t)_serial_data_bits + 7) << std::endl;
  (*buffer) << "parity bit (0=none, 1=even, 2=odd): "
            << _serial_parity_bit << std::endl;
  (*buffer) << "stop bits: " << ((uint32_t)_serial_stop_bits + 1) << std::endl;
  (*buffer) << "auto start: " << _serial_auto_start << std::endl;
  (*buffer) << std::endl << "==== Logging to File ====" << std::endl;
  (*buffer) << "enabled on start [y/n]: "
            << _log_enable_file_logging_on_start << std::endl;
  (*buffer) << "dir path: " << _log_dir_path << std::endl;
  (*buffer) << "filename pattern: " << _log_filename_pattern << std::endl;
  (*buffer) << "append on start [y/n]: "
            << _log_append_on_start << std::endl;
  (*buffer) << std::endl << "==== Kiosk Mode ====" << std::endl;
  (*buffer) << "full screen [y/n]: " << _full_screen << std::endl;
  (*buffer) << "window width [px]: " << _window_width << std::endl;
  (*buffer) << "window height [px]: " << _window_height << std::endl;
  (*buffer) << "control show after pressing [s]: "
            << _control_show_after_pressing << std::endl;
  (*buffer) << "control autohide after [s]: "
            << _control_autohide_after << std::endl;
  (*buffer) << "enable cursor [y/n]: " << _enable_cursor << std::endl;
  (*buffer) << "enable button 'quit' [y/n]: "
            << _enable_button_quit << std::endl;
  (*buffer) << std::endl << "==== Audio ====" << std::endl;
  (*buffer) << "enable [y/n]: " << _enable_audio << std::endl;
  (*buffer) << "enable volume control [y/n]: "
            << _enable_volume_control << std::endl;
  (*buffer) << "sample scale [1]: " << _audio_sample_scale << std::endl;
  (*buffer) << "sample rate [#/s]: " << _audio_sample_rate << std::endl;
  (*buffer) << "channels [#]: " << _audio_channels << std::endl;
  (*buffer) << "alsa verbose [y/n]: " << _alsa_verbose << std::endl;
  (*buffer) << "alsa playback device: " << _alsa_playback_device << std::endl;
  (*buffer) << "alsa buffer time [Âµs]: " << _alsa_buffer_time << std::endl;
  (*buffer) << "alsa period time [Âµs]: " << _alsa_period_time << std::endl;
  (*buffer) << "initial volume [0.0â¦1.0]: "
            << _audio_initial_volume << std::endl;
  (*buffer) << std::endl << "==== Key Bindings ====" << std::endl;
  (*buffer) << "key bindings: " << _key_bindings << std::endl;
  (*buffer) << std::endl;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
