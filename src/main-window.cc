/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <main-window.hh>
#include <log.hh>

Main_window::Main_window(const uint16_t width,
                         const uint16_t height,
                         App_control *app_control,
                         Streamer_thread *streamer_thread,
                         Qt_actions *actions,
                         QWidget *parent)
  : QMainWindow(parent)
{
  _config_panel = 0;

  if (!app_control) {
    Log::fatal("Main_window::Main_window(): app_control is NULL");
  }
  _app_control = app_control;

  if (!streamer_thread) {
    Log::fatal("Main_window::Main_window(): streamer_thread is NULL");
  }
  _streamer_thread = streamer_thread;

  if (!actions) {
    Log::fatal("Main_window::Main_window(): actions is NULL");
  }

  setWindowFlags(windowFlags() | Qt::FramelessWindowHint);

  const IConfig *config = _app_control->get_config();
  if (!config->get_enable_cursor()) {
    setCursor(Qt::BlankCursor);
  }

  setWindowTitle(tr("Serial Sniffer"));

  _window_icon = new QIcon("app-icon.png");
  if (!_window_icon) {
    Log::fatal("Main_window::Main_window(): not enough memory");
  }
  setWindowIcon(*_window_icon);

  _menu_bar = new Menu_bar(actions, this);
  if (!_menu_bar) {
    Log::fatal("Main_window::Main_window(): not enough memory");
  }
  setMenuBar(_menu_bar);

  _tab = new QTabWidget(this);
  if (!_tab) {
    Log::fatal("Main_window::Main_window(): not enough memory");
  }
  setCentralWidget(_tab);

  _config_panel = new Config_panel(_app_control, _tab);
  if (!_config_panel) {
    Log::fatal("Main_window::Main_window(): not enough memory");
  }
  _tab->addTab(_config_panel, tr(""));

  _control_panel = new Control_panel(_app_control, _streamer_thread, _tab);
  if (!_control_panel) {
    Log::fatal("Main_window::Main_window(): not enough memory");
  }
  _tab->addTab(_control_panel, tr("&Operation Control"));

  _log_panel = new Log_panel(_app_control, _tab);
  if (!_log_panel) {
    Log::fatal("Main_window::Main_window(): not enough memory");
  }
  _log_panel->add_status_listener(_control_panel->get_logger_control_panel());
  _streamer_thread->add_event_listener(_log_panel);
  //_streamer_thread->add_status_listener(_log_panel);
  _tab->addTab(_log_panel, tr("Con&sole Log"));

  if (config->get_serial_auto_start()) {
    _app_control->start_stream();
  }
}

Main_window::~Main_window()
{
  // locally managed Qt objects
  delete _window_icon;
  _window_icon = 0;

  _config_panel->deleteLater();
  _config_panel = 0;

  _streamer_thread->remove_event_listener(_log_panel);
  //_streamer_thread->remove_status_listener(_log_panel);
  _log_panel->remove_status_listener(_control_panel->
                                     get_logger_control_panel());
  _log_panel->deleteLater();
  _log_panel = 0;

  _control_panel->deleteLater();
  _control_panel = 0;

  _menu_bar->deleteLater();
  _menu_bar = 0;

  _tab->deleteLater();
  _tab = 0;

  // elsewhere managed objects
  _app_control = 0;
  _streamer_thread = 0;
}

IConsole_logger *
Main_window::get_console_logger()
{
  return _log_panel;
}

void
Main_window::closeEvent(QCloseEvent *event)
{
  _app_control->quit();
  event->ignore();
}

void
Main_window::load_config_values()
{
  _config_panel->load_values();
}

void
Main_window::config_dirty_changed()
{
  if (_config_panel) {
    _config_panel->dirty_changed();
    const int tab_index = _tab->indexOf(_config_panel);
    if (tab_index >= 0) {
      const bool config_dirty = _config_panel->get_dirty();
      _tab->setTabText(tab_index,
                       config_dirty ?
                       tr("&Configuration*") :
                       tr("&Configuration "));
    }
  } else {
    // this class has not yet been fully initialized
    // => ignore signals
  }
}

const bool
Main_window::get_config_dirty() const
{
  return
    _config_panel &&
    _config_panel->get_dirty();
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
