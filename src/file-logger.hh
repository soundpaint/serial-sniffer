/*
 * serial-sniffer -- a serial port sniffer and logger
 *
 * Copyright (C) 2021 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/serial-sniffer>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef FILE_LOGGER_HH
#define FILE_LOGGER_HH

#include <fstream>
#include <iconfig.hh>
#include <iserial-event-filter.hh>
#include <iserial-event-listener.hh>

class File_logger : public ISerial_event_listener
{
public:
  File_logger(const IConfig *config);
  virtual ~File_logger();
  virtual void start();
  virtual void stop();
  virtual void notify_event(const Serial_event *event);
private:
  const IConfig *_config;
  ISerial_event_filter *_event_filter;
  std::ofstream *_log_file;
  static std::string create_date();
  static std::string create_uid();
  static std::string
  instantiate_filename_pattern(const std::string *filename_pattern);
};

std::ostream &operator <<(std::ostream &os, const File_logger &file_logger);

#endif /* FILE_LOGGER_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
